 The following code was generated by JFlex 1.4.3 on 040312 16:02 


  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
 
      http:www.apache.orglicensesLICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 

package org.apache.jena.iri.impl;

 com.pontetec.stonesoup.trace.Tracer;
 java.io.PrintStream;
 java.io.File;
 java.io.FileOutputStream;
 java.io.UnsupportedEncodingException;
 java.io.FileNotFoundException;
 java.util.Scanner;
 java.util.NoSuchElementException;


  This class is a scanner generated by 
  <a href="http:www.jflex.de">JFlex<a> 1.4.3
  on 040312 16:02 from the specification file
  <tt>srcmainjflexorgapachejenairiimplhost.jflex<tt>
 
class LexerHost implements org.apache.jena.iri.ViolationCodes, org.apache.jena.iri.IRIComponents, Lexer {

  public static class UnsaltTeneriffe<T> {
		private T weld_panteleologism;

		public UnsaltTeneriffe(T weld_panteleologism) {
			this.weld_panteleologism = weld_panteleologism;
		}

		public T getweld_panteleologism() {
			return this.weld_panteleologism;
		}
	}


	static PrintStream heirloomObtemper = null;

	private static final java.util.concurrent.atomic.AtomicBoolean lignicolineGallic = new java.util.concurrent.atomic.AtomicBoolean(
			false);

 This character denotes the end of file 
  private static final int YYEOF = -1;

   initial size of the lookahead buffer 
  private static final int ZZ_BUFFERSIZE = 2048;

   lexical states 
  private static final int YYINITIAL = 0;

  
    ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
    ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
                     at the beginning of a line
    l is of the form l = 2k, k a non negative integer
   
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

   
    Translates characters to character classes
   
  private static final String ZZ_CMAP_PACKED = 
    "41015201510751211410111"+
    "11311421511641211015101530"+
    "6724221110161012010631717"+
    "12417301510uff8023";

   
    Translates characters to character classes
   
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

   
    Translates DFA states to action switch labels.
   
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "2112131453151652"+
    "231413171624110111"+
    "53251121131141611572"+
    "171101711617117120121"+
    "11514112111210122123111"+
    "1247311315112114112125"+
    "126127113130131132114133"+
    "1611111513411213552116"+
    "11713612113712311617110"+
    "17113115117120121125124"+
    "110125124122123140126124"+
    "6312713013215112133125"+
    "141142126143127113125133"+
    "130142131132144114126133"+
    "16111115124134145146142"+
    "147152236137150151137152"+
    "1531711027115210124113"+
    "125113133115120122131134"+
    "12514312414124024373113"+
    "125141142143154113125133"+
    "244114126133143115124115"+
    "124342136150136137136155"+
    "151137152150151156137157"+
    "1531521531601711017115"+
    "11012411312513315424363"+
    "155157154113125133143133"+
    "143151153115124412136137"+
    "136155151116117121136137"+
    "136150151137152153255157"+
    "161162151156137157153123"+
    "150152150161156151153162"+
    "156157163164153160152163"+
    "160164160120122134140131"+
    "14114415446533155157161"+
    "162163164162164133143156"+
    "160372136137155150152150"+
    "156152160161155157162163"+
    "161162166151153157150152"+
    "150156152160161163166151"+
    "153162166156160166164163"+
    "164267164267170365170161"+
    "163166167372150152155157"+
    "120122134140131141144155"+
    "157166154161163162164166"+
    "151153150152150156152160"+
    "161163166156160162164156"+
    "160367170165127130132142"+
    "362155157161163161163162"+
    "164166167156160120122134"+
    "140131141144154162164156"+
    "160352161163161163166167"+
    "166167166167302171166167"+
    "2621721102";

  private static int [] zzUnpackAction() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;        index in packed string  
    int j = offset;   index in unpacked array 
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


   
    Translates a state to a row index in the transition table
   
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "000240500740120014401700214"+
    "024002640310033403600u01040u01180u012c"+
    "0u01400u01540u01680u017c0u01900u01a40u01b80u01cc"+
    "0u01e00u01f40u02080u021c0u02300u02440u02580u026c"+
    "0u02800u02940u02a80u02bc0u02d00u02e40u02f80u030c"+
    "0u03200u03340u03480u035c0u03700u03840u03980u03ac"+
    "0u03c00u03d40u03e80u03fc0u04100u04240u04380u044c"+
    "0u04600u04740u04880u049c0u04b00u04c40u04d80u04ec"+
    "0u05000u05140u05280u053c0u05500u05640u05780u058c"+
    "0u05a00u05b40u05c80u05dc0u05f00u06040u06180u062c"+
    "0u06400u06540u06680u067c0u06900u06a40u06b80u06cc"+
    "0u06e00u06f40u07080u071c0u07300u07440u07580u076c"+
    "0u07800u079403600u07a80u07bc0u07d00u07e40u07f8"+
    "0u080c0u08200u08340u08480u085c0u08700u08840u0898"+
    "0u08ac0u08c00u08d40u08e80u08fc0u09100u09240u0938"+
    "0u094c0u09600u09740u09880u099c0u09b00u09c40u09d8"+
    "0u09ec0u0a000u0a140u0a280u0a3c0u0a500u0a640u0a78"+
    "0u0a8c0u0aa00u0ab40u0ac80u0adc0u0af00u0b040u0b18"+
    "0u0b2c0u0b400u0b540u0b680u0b7c0u0b900u0ba40u0bb8"+
    "0u0bcc0u0be00u0bf40u0c080u0c1c0u0c300u0c440u0c58"+
    "0u0c6c0u0c800u0c94036003600u0ca80u0cbc0u0cd0"+
    "0u0ce40u0cf80u0d0c0u0d200u0d340u0d480u0d5c0u0d70"+
    "0u0d8403600u0d980u0dac0u0dc00u0dd40u0de80u0dfc"+
    "0u0e100u0e240u0e380u0e4c0u0e600u0e740u0e880u0e9c"+
    "0u0eb00u0ec40u0ed80u0eec0u0f000u0f140u0f280u0f3c"+
    "0u0f500u0f640u0f780u0f8c0u0fa00u0fb40u0fc80u0fdc"+
    "0u0ff00u10040u10180u102c0u10400u10540u10680u107c"+
    "0u10900u10a40u10b80u10cc0u10e00u10f40u11080u111c"+
    "0u11300u11440u11580u116c0u11800u11940u11a80u11bc"+
    "0u11d00u11e40u11f80u120c0u12200u12340u12480u125c"+
    "0u12700u12840u12980u12ac0u12c00u12d40u12e80u12fc"+
    "0u13100u13240u13380u134c0u13600u13740u13880u139c"+
    "0u13b00u13c40u13d80u13ec0u14000u14140u14280u143c"+
    "0u14500u14640u14780u148c0u14a00u14b40u14c80u14dc"+
    "0u14f00u15040u15180u152c0u15400u15540u15680u157c"+
    "0u15900u15a40u15b80u15cc0u15e00u15f40u16080u161c"+
    "0u16300u16440u16580u166c0u16800u16940u16a80u16bc"+
    "0u16d00u16e40u16f80u170c0u17200u17340u17480u175c"+
    "0u17700u17840u17980u17ac0u17c00u17d40u17e80u17fc"+
    "0u18100u18240u18380u184c0u18600u18740u18880u189c"+
    "0u18b00u18c40u18d80u18ec0u19000u19140u19280u193c"+
    "0u19500u19640u19780u198c0u19a00u19b40u19c80u19dc"+
    "0u19f00u1a040u1a180u1a2c0u1a400u1a540u1a680u1a7c"+
    "0u1a900u1aa40u1ab80u1acc0u1ae00u1af40u1b080u1b1c"+
    "0u1b300u1b440u1b580u1b6c0u1b800u1b940u1ba80u1bbc"+
    "0u1bd00u1be40u1bf80u1c0c0u1c200u1c340u1c480u1c5c"+
    "0u1c700u1c840u1c980u1cac0u1cc00u1cd40u1ce80u1cfc"+
    "0u1d100u1d240u1d380u1d4c0u1d600u1d740u1d880u1d9c"+
    "0u1db00u1dc40u1dd80u1dec0u1e000u1e140u1e280u1e3c"+
    "0u1e500u1e640u1e780u1e8c0u1ea00u1eb40u1ec80u1edc"+
    "0u1ef00u1f040u1f180u1f2c0u1f400u1f540u1f680u1f7c"+
    "0u1f900u1fa40u1fb80u1fcc0u1fe00u1ff40u20080u201c"+
    "0u20300u20440u20580u206c0u20800u20940u20a80u20bc"+
    "0u20d00u20e40u20f80u210c0u21200u21340u21480u215c"+
    "0u21700u21840u21980u21ac0u21c00u21d40u21e80u21fc"+
    "0u22100u22240u22380u224c0u22600u22740u22880u229c"+
    "0u22b00u22c40u22d80u22ec0u23000u23140u23280u233c"+
    "0u23500u23640u23780u238c0u23a00u23b40u23c80u23dc"+
    "0u23f00u24040u24180u242c0u24400u24540u24680u247c"+
    "0u24900u24a40u24b80u24cc0u24e00u24f40u25080u251c"+
    "0u25300u25440u25580u256c0u25800u25940u25a80u25bc"+
    "0u25d00u25e40u25f80u260c0u26200u26340u26480u265c"+
    "0u26700u26840u26980u26ac0u26c00u26d40u26e80u26fc"+
    "0u27100u27240u27380u274c0u27600u27600u27740u2788"+
    "0u20080u279c0u27b00u27c40u27d80u27ec0u28000u2814"+
    "0u28280u283c0u28500u28640u28780u288c0u28a00u28b4"+
    "0u28c80u28dc0u28f00u29040u29180u292c0u29400u2954"+
    "0u29680u297c0u29900u29a40u29b80u29cc0u29e00u29f4"+
    "0u2a080u2a1c0u2a300u2a440u2a580u2a6c0u2a800u2a94"+
    "0u2aa80u2abc0u2ad00u2ae40u2af80u2b0c0u2b200u2b34"+
    "0u2b480u2b5c0u2b700u2b840u2b980u2bac0u2bc00u2bd4"+
    "0u2be80u2bfc0u2c100u2c240u2c380u2c4c0u2c600u2c74"+
    "0u2c880u2c9c0u2cb00u2cc40u2cd80u2cec0u2d000u2d14"+
    "0u2d280u2d3c0u2d500u2d640u2d780u2d780u2d8c0u2da0"+
    "0u2db40u2dc80u2ddc0u2df00u2e040u2e180u2e2c0u2e40"+
    "0u2e540u2e680u2e7c0u2e900u2ea40u2eb80u2ecc0u2ee0"+
    "0u2ef40u2f080u2f1c0u2f300u2f440u2f580u2f6c0u2f80"+
    "0u2f940u2fa80u2fbc0u2fd00u2fe40u2ff80u300c0u3020"+
    "0u30340u30480u305c0u30700u30840u30980u30ac0u30c0"+
    "0u30d40u30e80u30fc0u31100u31240u31380u314c0u3160"+
    "0u31740u31880u319c0u31b00u31c40u31d80u31ec0u3200"+
    "0u32140u32280u323c0u32500u32640u32780u328c0u32a0"+
    "0u32b40u32c80u32dc0u32f00u33040u33180u332c0u3340"+
    "0u33540u33680u337c0u33900u33a40u33b80u33cc0u33e0"+
    "0u33f40u34080u341c0u34300u34440u34580u346c0u3480"+
    "0u34940u34a80u34bc0u34d00u34e40u34f80u350c0u3520"+
    "0u35340u35480u355c0u35700u35840u35980u35ac0u35c0"+
    "0u35d40u35e80u35fc0u36100u36240u36380u364c0u3660"+
    "0u36740u36880u369c0u36b00u36c40u36d80u36ec0360"+
    "0u37000u37140u37280u373c0u37500u37640u37780u378c"+
    "0u37a00u37b40u37c80u37dc0u37f00u38040u38180u382c"+
    "0u38400u38540u38680u387c0u38900u38a40u38b80u38cc"+
    "03600u38e00u38f40u39080u391c0u39300u39440u3958"+
    "0u396c0u39800u39940u39a80u39bc0u39d00u39e40u39f8"+
    "0u3a0c0u3a200u3a340u3a480u3a5c0u3a700u3a840u3a98"+
    "0u3aac0u3ac00u3ad40u3ae80u3afc0u3b100u3b240u3b38"+
    "0u3b4c0u3b600u3b740u3b880u3b9c0u3bb00u3bc40u3bd8"+
    "0u3bec0u3c000u3c140u3c280u3c3c0u3c500u3c640u3c78"+
    "0u3c8c0u3ca00u3cb40u3cc80u3cdc0u3cf00u3d040u3d18"+
    "0u3d2c0u3d400u3d540u3d680u3d7c0u3d900u3da40u3db8"+
    "0u3dcc0u3de00u3df40u3e080u3e1c0u3e300u3e440u3e58"+
    "0u3e6c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;   index in packed string  
    int j = offset;   index in unpacked array 
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

   
    The transition table of the DFA
   
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "1213243215121617"+
    "110111271411211315114"+
    "242215116117315120121617"+
    "515222221232212412722"+
    "1251261241272222413022"+
    "1241272413113212413322"+
    "2221342212412635122125"+
    "1261241272222213422124"+
    "1263612212512612412722"+
    "2221342212412637122125"+
    "1261241272222213422124"+
    "12137136337140122125126"+
    "124127222251232213112"+
    "10251261311272224114222"+
    "14312104114414314522227"+
    "14622133121027147133127"+
    "27151503151511156501015152"+
    "3151531546521015153315153"+
    "1556531515156131522225123"+
    "2213112102515713112722"+
    "243215127411211315"+
    "1142223113022131121031"+
    "1601311332222512322131"+
    "12102516113112722262163"+
    "2216412106216516416622"+
    "22714622133121027167133"+
    "127222532151275170"+
    "171151722223113022131"+
    "12103117313113322264174"+
    "2216412106417516417622"+
    "233177221331210331100233"+
    "2224321512110111021103"+
    "11042102141121131511422"+
    "225110522131126106225157"+
    "131127222251342213112"+
    "610622515713112722225134"+
    "22131126107225157131127"+
    "22225134221311211071106"+
    "410722515713112722241142"+
    "22143121041111014314522"+
    "211132111212711121311121113"+
    "222431114221431210431115"+
    "1431116222117112022112112"+
    "1011711221121112322245112422"+
    "111612104511251116145222126"+
    "32112712712611411131127114"+
    "222661130221761210661131"+
    "1761663151501132215151115"+
    "65010151511133215151115651"+
    "101511343151135154613410151135"+
    "31511351556135101511363151137"+
    "1140613610151137315113711416137"+
    "101511422151143114411511451146"+
    "11471150214651522215116322"+
    "11521210151115311521154222152"+
    "1742211521210152115511521156"+
    "2221511632211521210151165"+
    "115211542226211572216412"+
    "1062165164166222160321161"+
    "127160116211631161116422264"+
    "116522164121064175164176"+
    "22262116622164121062165"+
    "1641662226611672217612"+
    "10661131176166222154113022"+
    "1156121015411311156115422231"+
    "13022131121031132131133"+
    "222431114221431210431170"+
    "1431116222331772213312"+
    "10331171233222152174221152"+
    "12101521751152115622216132"+
    "1161127161117211731161117422"+
    "264117522164121064175164"+
    "17622276117622176121076"+
    "1177276222127321127127127"+
    "17212001127172222156120122"+
    "1156121015611772156222221202"+
    "22124126203122125126124"+
    "12722222120222124126204"+
    "122125126124127222221202"+
    "22124126205122125126124"+
    "12722222120222124121205"+
    "120432051206122125126124127"+
    "2224321512620714112"+
    "1131511422225110522131"+
    "12610622516113112722225"+
    "13422131126106225161131"+
    "12722221011202212111210210"+
    "112212111212222213142221214"+
    "1272131411441214145222214"+
    "111422121412721414311701214"+
    "1116222451124221116121045"+
    "1215111614522211232111212"+
    "711227111121200222211121622"+
    "12111210211121712111220222116"+
    "122122111612101161222211622"+
    "21171223221121121011711221121"+
    "11232222243212251272242163"+
    "12251226222121122722112112"+
    "10121121711211230222117123122"+
    "11211210117112211211123222123"+
    "12322212301210123123312301123"+
    "22223432123512723421131235"+
    "111322221212362212201210212"+
    "123312201212222237146221240"+
    "1272371271471240127222240"+
    "17722124012724013311711240"+
    "1332222413212421272411164"+
    "12261242116422266124322176"+
    "121066113117616621541321244"+
    "1413231541331245141334151246315"+
    "12471546246101512473151247155"+
    "6247101512503151251125262501015"+
    "125131512511253625110151254215"+
    "1143125511512561257126012612257"+
    "101512552151262125511512631264"+
    "1265126622641015126721511431270"+
    "1271626710151270215126212701272"+
    "6270101512671273115114312701271"+
    "6274101512671273115114312701271"+
    "6275101512671273115114312701271"+
    "6276101512671273115114312701271"+
    "1276127532761277515222251157"+
    "2213112102516113112722"+
    "231116522131121031173131"+
    "13322230013012213021210300"+
    "13031302130422227116722133"+
    "1210271671331272223021305"+
    "221302121030213061302130722"+
    "2331176221331210331100233"+
    "22262321641210621117164"+
    "166222310163221311127310"+
    "131213131311131422231117422"+
    "1311127311131513161311131722"+
    "2312163221315121031213131315"+
    "131422232011202213211210320"+
    "1322132113232223141130221317"+
    "12103141324131713142226432"+
    "1641210641121164176222325"+
    "321326121032513271326133022"+
    "266321761210661123176166"+
    "222121121622112112101211217"+
    "112112302227612012217612"+
    "10761177276222315174221315"+
    "12103151316131513172223211216"+
    "221321121032113311321133222"+
    "23171201221317121031713332317"+
    "222326321326121032613341326"+
    "133522276321761210761230"+
    "27622276133622176121076"+
    "1177276222116122122111612"+
    "101161337211622224232124212"+
    "72421174134012421174222432"+
    "15121341134213431344234214"+
    "1121131511422225134522"+
    "13112634622515713112722"+
    "225120222131126346225157"+
    "1311272222512022213112"+
    "6347225157131127222251202"+
    "2213112134713464347225157"+
    "1311272222213452212412"+
    "620312212512612412722241"+
    "1223221431210411110143145"+
    "222431227221431210431115"+
    "143111622245123222111612"+
    "1045112511161452224114222"+
    "143121041135014314522243"+
    "11142214312104313511431116"+
    "222123123622123012101231233"+
    "12301123222225321225127225"+
    "2173122513402221211352221121"+
    "12101211217112112302221161353"+
    "221116121011612222116222235"+
    "32123512723522001235120022"+
    "22201354221220121022013552220"+
    "222117321121121111711211123"+
    "22235611202213571273561320"+
    "1322135713232223571216221357"+
    "1273571321133113571332222323"+
    "12362213321210323136013321323"+
    "2221213211211212121123022"+
    "22301353221230121023013552230"+
    "222327321334121132713341361"+
    "222123321230121112312301123"+
    "222123136222123012101231233"+
    "12301123222363112422136412"+
    "7363145121513641452223641221"+
    "2213641273641116133713641116"+
    "22236532136612736522261366"+
    "12262222714622133121027"+
    "13671331272223317722133"+
    "1210331370233222371113022"+
    "1372127371131413241372131422"+
    "2372120122137212737213171333"+
    "137213172223303213351210330"+
    "136113351330101515423151551615"+
    "137331513741252637310151374315"+
    "1374125363741015137531513761377"+
    "63751015137631513761u010063761015"+
    "1u010121511431u01021u01036u010110151u0102"+
    "21512621u01021u01046u010210151u01011273"+
    "11511431u01021u01036u010510151u01011273"+
    "11511431u01021u01036u010610151u01011273"+
    "11511431u01021u01036u010710151u01011273"+
    "11511431u01021u01031u01071u01063u01071u0108"+
    "10151u01021u010911512621u01021u01046u010a"+
    "10151u01021u010911512621u01021u01046u010b"+
    "10151u01021u010911512621u01021u01046u010c"+
    "10151u01021u010911512621u01021u01041u010c"+
    "1u010b3u010c1u010d10151u010e21511431u010f"+
    "12716u010e10151u010f21512621u010f1272"+
    "6u010f10151254315125511512561257"+
    "126012612257101512553151255115"+
    "1263126412651266226416151u01101u0111"+
    "1u01121u01132u011110151u010e1u01141151143"+
    "1u010f12716u011510151u010e12731151143"+
    "1u010f12716u011510151u010e12731151143"+
    "1u010f12716u011610151u010e12731151143"+
    "1u010f12711u01161u01154u0116515222300"+
    "1u011722130212103001u011813021304"+
    "222u0119321u011a127u01191u011b1u011c"+
    "1u011a1u011d2223021u011e22130212"+
    "103021u011f13021307222621u012022"+
    "164121062165164166222304"+
    "1u012122130712103041u012213071304"+
    "222u011a321u011a127u011a1u01231u0124"+
    "1u011a1u0125222641u01262216412"+
    "10641751641762223071u012722"+
    "130712103071u01282307222312163"+
    "22131512103121u01291315131422"+
    "231517422131512103151u012a1315"+
    "13172223121632213151210312"+
    "1u012b13151314222325163221326"+
    "121132513261330222314113022"+
    "131712103141u012c13171314222315"+
    "17422131512103151u012d13151317"+
    "22232617422132612123261335"+
    "222317120122131712103171u012e"+
    "231722232011202213211210320"+
    "1u012f132113232223211216221321"+
    "12103211u0130132113322223271120"+
    "221334121132713341361222323"+
    "123622133212103231u013113321323"+
    "222330113022133512113301335"+
    "133022232511662213261211325"+
    "13261330222326117522132612"+
    "123261335222327123122133412"+
    "11327133413612223301243221335"+
    "121133013351330222334121622"+
    "133412123341u0132222332135422"+
    "133212103321u013323322223351201"+
    "2213351213335222334135222"+
    "133412123341u0132222335133622"+
    "1335121333522233532133512"+
    "103351u013223352222301354221230"+
    "121023013552230222332135422"+
    "133212103321u01342332222221u0135"+
    "22124126u0136122125126124"+
    "127222221u013522124126u0137"+
    "122125126124127222221u0135"+
    "22124126u0138122125126124"+
    "127222221u013522124121u0138"+
    "1u01373u01381u0139122125126124127"+
    "22243215126u013a14112"+
    "1131511422225134522131"+
    "12634622516113112722225"+
    "120222131126346225161131"+
    "12722221011202212111210210"+
    "1u013b121112122222111216221211"+
    "12102111u013c1211122022233432"+
    "133412123341u0132222230321230"+
    "1213230222366321366127366"+
    "2340136613402222301u013d221230"+
    "121023013552230222320112022"+
    "132112103201u013e13211323222321"+
    "121622132112103211u013f13211332"+
    "2223611236221u013212113611u0132"+
    "13612223611362221u01321211361"+
    "1u01321361222361321u01321211361"+
    "1u0132136122245112422111612"+
    "10451u01401116145222116122122"+
    "111612101161u01412116222u01421236"+
    "221u0143127u0142132313601u01431323"+
    "222u01431354221u0143127u01431332"+
    "1u01341u014313322221541130221156"+
    "12101541u0144115611542221561201"+
    "22115612101561u01452156222314"+
    "113022131712103141u014613171314"+
    "222317120122131712103171u0147"+
    "23173151u01483151u014912526u01481015"+
    "1u01493151u014912536u014910151u014a315"+
    "1u014b1u014c6u014a10151u014b3151u014b1u014d"+
    "6u014b10151u014e21511431u014f1151u0150"+
    "1u01511u01521u01532u015110151u014f2151262"+
    "1u014f1151u01541u01551u01561u01572u01551015"+
    "1u015821511431u01591u01036u015810151u0159"+
    "21512621u01591u01046u015910151u014e315"+
    "1u014f1151u01501u01511u01521u01532u01511015"+
    "1u014f3151u014f1151u01541u01551u01561u0157"+
    "2u015510151u01581u011411511431u01591u0103"+
    "6u015a10151u0158127311511431u01591u0103"+
    "6u015a10151u0158127311511431u01591u0103"+
    "6u015b10151u0158127311511431u01591u0103"+
    "1u015b1u015a4u015b16151u015c1u015d1u015e1u015f"+
    "2u015d10151u01591u016011512621u01591u0104"+
    "6u016110151u01591u010911512621u01591u0104"+
    "6u016110151u01591u010911512621u01591u0104"+
    "6u016210151u01591u010911512621u01591u0104"+
    "1u01621u01614u016210151u016321511431u0164"+
    "12716u016310151u016421512621u01641272"+
    "6u016411151u01654156u016611151u0165415"+
    "6u011011151u01654156u011111151u0165415"+
    "1u01111u01103u01111u016716156u016610151u0163"+
    "1u011411511431u016412716u016810151u0163"+
    "127311511431u016412716u016851522"+
    "2u0169321u016a127u01691u016b1u016c1u016a"+
    "1u016d222u016e1u0120221u016f1210u016e"+
    "1651u016f1u0170222u01711301221u0172"+
    "127u01711u01731u01741u01721u0175222u0172"+
    "1305221u0172127u01721u01761u01771u0172"+
    "1u0178222u01731301221u01761210u0173"+
    "1u01741u01761u0175222u01791u017a221u017b"+
    "1210u01791u017c1u017b1u017d222u01751u017e"+
    "221u01781210u01751u017f1u01781u017522"+
    "2u016a321u016a127u016a1u01801u01811u016a"+
    "1u0182222u016f1u0126221u016f1210u016f"+
    "1751u016f1u0183222u0184321u018512"+
    "7u01841u01861u01871u01851u0188222u018932"+
    "1u018a127u01891u016d1u018b1u018a1u016d22"+
    "2u01701u018c221u01831210u017011311u0183"+
    "1u0170222u01761305221u01761210u0176"+
    "1u01771u01761u0178222u017b1u018d221u017b"+
    "1210u017b1u018e1u017b1u018f222u01781u0190"+
    "221u01781210u01781u01912u0178222u0185"+
    "321u0185127u01851u01921u01931u01851u0194"+
    "222u018a321u018a127u018a1u01821u0195"+
    "1u018a1u0182222u01831u0196221u018312"+
    "10u018311772u0183222u0197163221u0198"+
    "1210u01971u01861u01981u0199222u0198174"+
    "221u01981210u01981u01921u01981u019a22"+
    "2u0197163221u01981210u019713251u0198"+
    "1u0199222u01991130221u019a1210u0199"+
    "13301u019a1u0199222u0198174221u0198"+
    "1210u019813261u01981u019a222u019a1201"+
    "221u019a1210u019a13352u019a222u019b"+
    "1120221u019c1210u019b13271u019c1u019d"+
    "222u019c1216221u019c1210u019c1334"+
    "1u019c1u019e222u019d1236221u019e12"+
    "10u019d13611u019e1u019d222u01321u013d22"+
    "1u01321213u0132222u019e1354221u019e"+
    "1210u019e1u01322u019e222u0132135422"+
    "1u01321213u01322224321512"+
    "1u019f1u01a01u01a11u01a22u01a014112113"+
    "15114222251u01a32213112"+
    "6u01a4225157131127222251u0135"+
    "22131126u01a4225157131127"+
    "222251u013522131126u01a5225"+
    "157131127222251u013522131"+
    "121u01a51u01a44u01a5225157131127"+
    "222221u01a322124126u0136122"+
    "125126124127222u01a61u017a22"+
    "1u01a71210u01a61u01a81u01a71u01a9222u01a7"+
    "1u018d221u01a71210u01a71u01aa1u01a71u01ab"+
    "222u0132321u01321213u0132222u019b"+
    "1120221u019c1210u019b1u01871u019c1u019d"+
    "222u019c1216221u019c1210u019c1u0193"+
    "1u019c1u019e222212123622122012"+
    "102121u01ac12201212222220135422"+
    "122012102201u01ad22202223231236"+
    "22133212103231u01ae1332132322"+
    "2332135422133212103321u01af2332"+
    "2223041u017e22130712103041u01b0"+
    "130713042223071u019022130712"+
    "103071u01b12307222u01991130221u019a"+
    "1210u01991u01881u019a1u0199222u019a1201"+
    "221u019a1210u019a1u01942u019a10151252"+
    "2315125316151u01b23151u01b31u014c6u01b2"+
    "10151u01b33151u01b31u014d6u01b310151u01b4"+
    "3151u01b51u01b66u01b410151u01b53151u01b5"+
    "1u01b76u01b510151u01b821511431u01b91u01ba"+
    "6u01b810151u01b921512621u01b91u01bb6u01b9"+
    "10151u01b8127311511431u01b91u01ba6u01bc"+
    "10151u01b8127311511431u01b91u01ba6u01bd"+
    "10151u01b8127311511431u01b91u01ba6u01be"+
    "10151u01b8127311511431u01b91u01ba1u01be"+
    "1u01bd3u01be1u01bf10151u01b91u01091151262"+
    "1u01b91u01bb6u01c010151u01b91u01091151262"+
    "1u01b91u01bb6u01c110151u01b91u01091151262"+
    "1u01b91u01bb6u01c210151u01b91u01091151262"+
    "1u01b91u01bb1u01c21u01c13u01c21u01c310151u01c4"+
    "21511431u01c51u01036u01c410151u01c5215"+
    "12621u01c51u01046u01c510151u01c41u0114115"+
    "11431u01c51u01036u01c610151u01c41273115"+
    "11431u01c51u01036u01c611151u01c74156u01c8"+
    "11151u01c74156u015c11151u01c74156u015d"+
    "11151u01c74151u015d1u015c3u015d1u01c91615"+
    "6u01c810151u01c51u016011512621u01c51u0104"+
    "6u01ca10151u01c51u010911512621u01c51u0104"+
    "6u01ca13151143115127121151262115"+
    "127224151u01cb1u01cc1u01cd1u01ce2u01cc1115"+
    "1u01cf4156u016611151u01654151u01101u0166"+
    "4u011011151u0114115114311512716u01d0"+
    "515222u01d11u0117221u01d2127u01d1"+
    "130013031u01d21304222u01d21u011e22"+
    "1u01d2127u01d2130213061u01d2130722"+
    "23001u0117221302121030013031302"+
    "1304222u01a61u01d3221u01a71210u01a6"+
    "1u01a81u01a71u01a92223041u0121221307"+
    "12103041u01b0130713042223001157"+
    "22130212103001u01181302130422"+
    "2302116522130212103021u011f1302"+
    "130722230411672213071210304"+
    "1u012213071304222u01731301221u0176"+
    "1210u01731u01d41u01761u0175222u01761305"+
    "221u01761210u01761u01d51u01761u017822"+
    "2u01731301221u01761210u01731u01d61u0176"+
    "1u01752223251u01202213261211325"+
    "13261330222u01751u017e221u017812"+
    "10u01751u01d71u01781u0175222u0176130522"+
    "1u01761210u01761u01d81u01761u0178222326"+
    "1u012622132612123261335222u0178"+
    "1u0190221u01781210u01781u01d92u017822"+
    "2u01791u017a221u017b1210u01791u01da1u017b"+
    "1u017d222u01db321u01dc127u01db2u011c"+
    "1u01dc1u01dd222u017b1u018d221u017b12"+
    "10u017b1u01de1u017b1u018f2223271u01df22"+
    "1334121132713341361222u017d1u01e0"+
    "221u018f1210u017d1u01e11u018f1u017d22"+
    "2u01e2321u01e3127u01e21u011d1u01dd1u01e3"+
    "1u011d2223301u018c2213351211330"+
    "133513302223021u011e22130212"+
    "10302130613021307222u01a71u01e422"+
    "1u01a71210u01a71u01aa1u01a71u01ab222307"+
    "1u012722130712103071u01b1230722"+
    "2307117622130712103071u01282307"+
    "222u01e51u0120221u01e6127u01e51u01e7"+
    "1u01741u01e61u01e8222u01e61u0126221u01e6"+
    "127u01e61u01e91u01771u01e61u01ea222u01e7"+
    "1u0120221u01e91210u01e71u01741u01e91u01e8"+
    "222u01eb1u01df221u01ec1210u01eb1u017c"+
    "1u01ec1u01ed222u01e81u018c221u01ea12"+
    "10u01e81u017f1u01ea1u01e8222u01ee1u012122"+
    "1u01ef127u01ee13041u01b01u01ef130422"+
    "2u01ef1u0127221u01ef127u01ef13071u01b1"+
    "1u01ef1307222u01a91u01f0221u01ab12"+
    "10u01a91u01f11u01ab1u01a9222u01f2321u01f3"+
    "127u01f21u01881u01f41u01f31u0188222u01dc"+
    "321u01dc127u01dc2u01241u01dc1u01f522"+
    "23341u01f622133412123341u013222"+
    "2u018f1u01f7221u018f1210u018f1u01f82u018f"+
    "222u01e3321u01e3127u01e31u01251u01f5"+
    "1u01e31u01252223351u019622133512"+
    "13335222u01e91u0126221u01e91210u01e9"+
    "1u01771u01e91u01ea222u01ec1u01f6221u01ec"+
    "1210u01ec1u018e1u01ec1u01f9222u01ea1u0196"+
    "221u01ea1210u01ea1u01912u01ea222u01ab"+
    "1u01fa221u01ab1210u01ab1u01fb2u01ab22"+
    "2u01f3321u01f3127u01f31u01941u01fc1u01f3"+
    "1u019422231211662213151210312"+
    "1u012b131513142223151175221315"+
    "12103151u012d131513172223141243"+
    "22131712103141u012c1317131422"+
    "2317133622131712103171u012e2317"+
    "222320123122132112103201u012f"+
    "13211323222321135222132112"+
    "103211u013013211332222323136222"+
    "133212103231u013113321323222332"+
    "1u013d22133212103321u0133233222"+
    "22212322124126u01fd122125"+
    "1261241272222212322124"+
    "126u01fe12212512612412722"+
    "22212322124126u01ff122125"+
    "1261241272222212322124"+
    "121u01ff1u01fe3u01ff1u0200122125126"+
    "12412722243215126u0201"+
    "1411211315114222251u01a3"+
    "22131126u01a4225161131127"+
    "222251u013522131126u01a4225"+
    "161131127222u01a61u01d3221u01a7"+
    "1210u01a61u02021u01a71u01a9222u01a71u01e4"+
    "221u01a71210u01a71u02031u01a71u01ab22"+
    "21171u01df221121121011711221121"+
    "1123222u01a91u01f0221u01ab1210u01a9"+
    "1u02041u01ab1u01a92221211u01f6221121"+
    "1210121121711211230222u01ab1u01fa"+
    "221u01ab1210u01ab1u02052u01ab222u01a9"+
    "1u01e0221u01ab1210u01a91u01f11u01ab1u01a9"+
    "222u01ab1u01f7221u01ab1210u01ab1u01fb"+
    "2u01ab222u019d1236221u019e1210u019d"+
    "1u01f41u019e1u019d222u019e1354221u019e"+
    "1210u019e1u01fc2u019e222661u018c22"+
    "176121066113117616622276"+
    "1u0196221761210761177276315"+
    "1u02063151u02071u014c6u020610151u0207315"+
    "1u02071u014d6u020710151u02083151u02091u020a"+
    "6u020810151u02093151u02091u020b6u02091015"+
    "1u020c21511431u020d1151u020e1u020f1u0210"+
    "1u02112u020f10151u020d21512621u020d115"+
    "1u02121u02131u02141u02152u021310151u0216215"+
    "11431u02171u01ba6u021610151u02172151262"+
    "1u02171u01bb6u021710151u020c3151u020d115"+
    "1u020e1u020f1u02101u02112u020f10151u020d315"+
    "1u020d1151u02121u02131u02141u02152u02131015"+
    "1u02161u011411511431u02171u01ba6u02181015"+
    "1u0216127311511431u02171u01ba6u02181015"+
    "1u0216127311511431u02171u01ba6u02191015"+
    "1u0216127311511431u02171u01ba1u02191u0218"+
    "4u021910151u02171u016011512621u02171u01bb"+
    "6u021a10151u02171u010911512621u02171u01bb"+
    "6u021a10151u02171u010911512621u02171u01bb"+
    "6u021b10151u02171u010911512621u02171u01bb"+
    "1u021b1u021a4u021b131511431151u01032115"+
    "12621151u010417151u01141151143115"+
    "1u01036u01d016151u021c1u021d1u021e1u021f2u021d"+
    "11151u02204156u01c811151u01c74151u015c"+
    "1u01c84u015c11151u016011512621151u0104"+
    "6u022111151u02224156u022311151u0222415"+
    "6u01cb11151u02224156u01cc11151u0222415"+
    "1u01cc1u01cb3u01cc1u022416156u022311151u0114"+
    "4156u01d05152223001u0117221302"+
    "12103001u0225130213042223021u011e"+
    "22130212103021u02261302130722"+
    "2u0227321u0228127u02272u016c1u02281u018b"+
    "222u02291u0120221u022a1210u02291u011b"+
    "1u022a1u022b222u022a1u0126221u022a12"+
    "10u022a1u01231u022a1u022c222u02291u012022"+
    "1u022a1210u022913251u022a1u022b222u022b"+
    "1u018c221u022c1210u022b13301u022c1u022b"+
    "222u022a1u0126221u022a1210u022a1326"+
    "1u022a1u022c222u022c1u0196221u022c12"+
    "10u022c13352u022c222u022d1u01df221u022e"+
    "1210u022d13271u022e1u022f222u02301u017a"+
    "221u0231127u02301u01791u017c1u02311u017d"+
    "222u02311u018d221u0231127u02311u017b"+
    "1u018e1u02311u018f222u017d1u01e0221u018f"+
    "1210u017d1u02321u018f1u017d222u022e1u01f6"+
    "221u022e1210u022e13341u022e1u023322"+
    "2u0234321u0235127u02342u01871u02351u01f4"+
    "222u0236321u0237127u02362u01dd1u0237"+
    "1u01dd222u022f1u0238221u02331210u022f"+
    "13611u02331u022f222u02391u017e221u023a"+
    "127u02391u01751u017f1u023a1u0175222u023a"+
    "1u0190221u023a127u023a1u01781u01911u023a"+
    "1u0178222u0228321u0228127u02282u0181"+
    "1u02281u0195222u01e71u0120221u01e912"+
    "10u01e71u023b1u01e91u01e8222u01e91u012622"+
    "1u01e91210u01e91u023c1u01e91u01ea222u01e7"+
    "1u0120221u01e91210u01e71u023d1u01e91u01e8"+
    "222u01e81u018c221u01ea1210u01e81u023e"+
    "1u01ea1u01e8222u01e91u0126221u01e912"+
    "10u01e91u023f1u01e91u01ea222u01ea1u019622"+
    "1u01ea1210u01ea1u02402u01ea222u01eb1u01df"+
    "221u01ec1210u01eb1u02411u01ec1u01ed22"+
    "2u01ec1u01f6221u01ec1210u01ec1u02421u01ec"+
    "1u01f9222u01ed1u0238221u01f91210u01ed"+
    "1u02431u01f91u01ed2223041u0121221307"+
    "12103041u0244130713042223071u0127"+
    "22130712103071u02452307222u0246"+
    "321u0247127u02462u018b1u02471u018b22"+
    "21231u0238221230121012312331230"+
    "1123222u02481u018c221u0249127u0248"+
    "1u01e81u017f1u02491u01e8222u02491u019622"+
    "1u0249127u02491u01ea1u01911u02491u01ea22"+
    "2u01ed1u0238221u01f91210u01ed1u02321u01f9"+
    "1u01ed222u018f1u01f7221u018f1210u018f"+
    "1u024a2u018f222u0235321u0235127u0235"+
    "2u01931u02351u01fc222u0237321u023712"+
    "7u02372u01f51u02371u01f5222u02331u024b22"+
    "1u02331210u02331u01322u0233222u01f91u024b"+
    "221u01f91210u01f91u024c2u01f9222u0247"+
    "321u0247127u02472u01951u02471u019522"+
    "22301u024b221230121023013552230"+
    "222u01f91u024b221u01f91210u01f91u024a"+
    "2u01f92222512322131126u024d"+
    "2251571311272222512322"+
    "131126u024e22515713112722"+
    "22512322131121u024e1u024d4u024e"+
    "225157131127222u024f1u01df22"+
    "1u02501210u024f11221u02501u0251222u0250"+
    "1u01f6221u02501210u025012171u02501u0252"+
    "222u02511u0238221u02521210u02511233"+
    "1u02521u0251222u02521u024b221u025212"+
    "10u025213552u025210151u014c23151u014d1615"+
    "1u02533151u02541u020a6u025310151u0254315"+
    "1u02541u020b6u025410151u02553151u02561u0257"+
    "6u025510151u02563151u02561u02586u02561015"+
    "1u025921511431u025a1u025b6u025910151u025a"+
    "21512621u025a1u025c6u025a10151u02591273"+
    "11511431u025a1u025b6u025d10151u02591273"+
    "11511431u025a1u025b6u025e10151u02591273"+
    "11511431u025a1u025b6u025f10151u02591273"+
    "11511431u025a1u025b1u025f1u025e3u025f1u0260"+
    "10151u025a1u010911512621u025a1u025c6u0261"+
    "10151u025a1u010911512621u025a1u025c6u0262"+
    "10151u025a1u010911512621u025a1u025c6u0263"+
    "10151u025a1u010911512621u025a1u025c1u0263"+
    "1u02623u02631u026410151u026521511431u0266"+
    "1u01ba6u026510151u026621512621u02661u01bb"+
    "6u026610151u02651u011411511431u02661u01ba"+
    "6u026710151u0265127311511431u02661u01ba"+
    "6u026710151u02661u016011512621u02661u01bb"+
    "6u026810151u02661u010911512621u02661u01bb"+
    "6u026811151u02694156u026a11151u0269415"+
    "6u021c11151u02694156u021d11151u0269415"+
    "1u021d1u021c3u021d1u026b16156u026a11151u0160"+
    "4156u022116151u026c1u026d1u026e1u026f2u026d"+
    "11151u02704156u022311151u02224151u01cb"+
    "1u02234u01cb515222u016e1u0120221u016f"+
    "1210u016e11531u016f1u0170222u016f1u0126"+
    "221u016f1210u016f11551u016f1u018322"+
    "2u02711u01d3221u0272127u02711u01a61u01a8"+
    "1u02721u01a9222u02721u01e4221u027212"+
    "7u02721u01a71u01aa1u02721u01ab222u01731166"+
    "221u01761210u01731u01d61u01761u017522"+
    "2u01761175221u01761210u01761u01d81u0176"+
    "1u0178222u01751243221u01781210u0175"+
    "1u01d71u01781u0175222u01781336221u0178"+
    "1210u01781u01d92u0178222u0179123122"+
    "1u017b1210u01791u01da1u017b1u017d222u017b"+
    "1352221u017b1210u017b1u01de1u017b1u018f"+
    "222u017d1362221u018f1210u017d1u01e1"+
    "1u018f1u017d222u01791u017a221u017b12"+
    "10u01791u02731u017b1u017d222u017b1u018d22"+
    "1u017b1210u017b1u02741u017b1u018f222361"+
    "1u0238221u013212113611u0132136122"+
    "2u018f1u013d221u018f1210u018f1u01f82u018f"+
    "222u02751u01df221u0276127u02751u01eb"+
    "1u017c1u02761u01ed222u02761u01f6221u0276"+
    "127u02761u01ec1u018e1u02761u01f9222u0277"+
    "1u01e0221u0278127u02771u017d1u02321u0278"+
    "1u017d222u02781u01f7221u0278127u0278"+
    "1u018f1u024a1u02781u018f222u0279321u027a"+
    "127u02792u01f41u027a1u01f4222u01751u017e"+
    "221u01781210u01751u027b1u01781u017522"+
    "2u01781u0190221u01781210u01781u027c2u0178"+
    "222u027d1u0120221u027e1210u027d1u0186"+
    "1u027e1u027f222u027e1u0126221u027e12"+
    "10u027e1u01921u027e1u0280222u027d1u012022"+
    "1u027e1210u027d13251u027e1u027f222u027f"+
    "1u018c221u02801210u027f13301u02801u027f"+
    "222u027e1u0126221u027e1210u027e1326"+
    "1u027e1u0280222u02801u0196221u028012"+
    "10u028013352u0280222u02811u01df221u0282"+
    "1210u028113271u02821u0283222u02821u01f6"+
    "221u02821210u028213341u02821u028422"+
    "2u02831u0238221u02841210u028313611u0284"+
    "1u0283222u01701u018c221u01831210u0170"+
    "1u01441u01831u0170222u01831u0196221u0183"+
    "1210u01831u01452u0183222u02851u01f022"+
    "1u0286127u02851u01a91u01f11u02861u01a922"+
    "2u02861u01fa221u0286127u02861u01ab1u01fb"+
    "1u02861u01ab222u01e81u018c221u01ea12"+
    "10u01e81u02871u01ea1u01e8222u01ea1u019622"+
    "1u01ea1210u01ea1u02882u01ea222u01321u024b"+
    "221u01321213u0132222u027a321u027a"+
    "127u027a2u01fc1u027a1u01fc222u02841u024b"+
    "221u02841210u02841u01322u028422225"+
    "12322131126u024d225161131"+
    "127222u01a61223221u01a71210u01a6"+
    "1u02021u01a71u01a9222u01a71227221u01a7"+
    "1210u01a71u02031u01a71u01ab222u01a91232"+
    "221u01ab1210u01a91u02041u01ab1u01a922"+
    "2u01ab1353221u01ab1210u01ab1u02052u01ab"+
    "3151u02893151u028a1u020a6u028910151u028a"+
    "3151u028a1u020b6u028a10151u028b3151u028c"+
    "1u028d6u028b10151u028c3151u028c1u028e6u028c"+
    "10151u028f21511431u02901151u02911u0292"+
    "1u02931u02942u029210151u029021512621u0290"+
    "1151u02951u02961u02971u02982u029610151u0299"+
    "21511431u029a1u025b6u029910151u029a215"+
    "12621u029a1u025c6u029a10151u028f3151u0290"+
    "1151u02911u02921u02931u02942u029210151u0290"+
    "3151u02901151u02951u02961u02971u02982u0296"+
    "10151u02991u011411511431u029a1u025b6u029b"+
    "10151u0299127311511431u029a1u025b6u029b"+
    "10151u0299127311511431u029a1u025b6u029c"+
    "10151u0299127311511431u029a1u025b1u029c"+
    "1u029b4u029c10151u029a1u016011512621u029a"+
    "1u025c6u029d10151u029a1u010911512621u029a"+
    "1u025c6u029d10151u029a1u010911512621u029a"+
    "1u025c6u029e10151u029a1u010911512621u029a"+
    "1u025c1u029e1u029d4u029e131511431151u01ba"+
    "211512621151u01bb17151u01141151143"+
    "1151u01ba6u01d011151u01601151262115"+
    "1u01bb6u022116151u029f1u02a01u02a11u02a22u02a0"+
    "11151u02a34156u026a11151u02694151u021c"+
    "1u026a4u021c131511432156u02a413151143"+
    "2156u026c131511432156u026d13151143"+
    "2151u026d1u026c3u026d1u02a516156u02a4515"+
    "222u01a61u01d3221u01a71210u01a61u02a6"+
    "1u01a71u01a9222u01a71u01e4221u01a712"+
    "10u01a71u02a71u01a71u01ab222u022d1u01df22"+
    "1u022e1210u022d1u011c1u022e1u022f222u022e"+
    "1u01f6221u022e1210u022e1u01241u022e1u0233"+
    "222u01eb1u01df221u01ec1210u01eb1u02a8"+
    "1u01ec1u01ed222u01ec1u01f6221u01ec12"+
    "10u01ec1u02a91u01ec1u01f9222u017d1u01e022"+
    "1u018f1210u017d1u02aa1u018f1u017d222u018f"+
    "1u01f7221u018f1210u018f1u02ab2u018f22"+
    "2u02ac1u0238221u02ad127u02ac1u01ed1u0232"+
    "1u02ad1u01ed222u02ad1u024b221u02ad12"+
    "7u02ad1u01f91u024a1u02ad1u01f9222u022b1u018c"+
    "221u022c1210u022b1u011d1u022c1u022b22"+
    "2u022c1u0196221u022c1210u022c1u01252u022c"+
    "222u01e71166221u01e91210u01e71u023d"+
    "1u01e91u01e8222u01e91175221u01e912"+
    "10u01e91u023f1u01e91u01ea222u01e8124322"+
    "1u01ea1210u01e81u023e1u01ea1u01e8222u01ea"+
    "1336221u01ea1210u01ea1u02402u01ea22"+
    "2u01eb1231221u01ec1210u01eb1u02411u01ec"+
    "1u01ed222u01ec1352221u01ec1210u01ec"+
    "1u02421u01ec1u01f9222u01ed1362221u01f9"+
    "1210u01ed1u02431u01f91u01ed222u01f91u013d"+
    "221u01f91210u01f91u024c2u01f9222u01a9"+
    "1u01f0221u01ab1210u01a91u02ae1u01ab1u01a9"+
    "222u01ab1u01fa221u01ab1210u01ab1u02af"+
    "2u01ab222u027f1u018c221u02801210u027f"+
    "1u01881u02801u027f222u02801u0196221u0280"+
    "1210u02801u01942u028010151u020a23151u020b"+
    "16151u02b03151u02b11u028d6u02b010151u02b1"+
    "3151u02b11u028e6u02b110151u02b23151u02b3"+
    "1u02b46u02b210151u02b33151u02b31u02b56u02b3"+
    "10151u02b621511431u02b71u02b86u02b61015"+
    "1u02b721512621u02b71u02b96u02b710151u02b6"+
    "127311511431u02b71u02b86u02ba10151u02b6"+
    "127311511431u02b71u02b86u02bb10151u02b6"+
    "127311511431u02b71u02b86u02bc10151u02b6"+
    "127311511431u02b71u02b81u02bc1u02bb3u02bc"+
    "1u02bd10151u02b71u010911512621u02b71u02b9"+
    "6u02be10151u02b71u010911512621u02b71u02b9"+
    "6u02bf10151u02b71u010911512621u02b71u02b9"+
    "6u02c010151u02b71u010911512621u02b71u02b9"+
    "1u02c01u02bf3u02c01u02c110151u02c22151143"+
    "1u02c31u025b6u02c210151u02c321512621u02c3"+
    "1u025c6u02c310151u02c21u011411511431u02c3"+
    "1u025b6u02c410151u02c2127311511431u02c3"+
    "1u025b6u02c410151u02c31u016011512621u02c3"+
    "1u025c6u02c510151u02c31u010911512621u02c3"+
    "1u025c6u02c5131512622156u02c613151262"+
    "2156u029f131512622156u02a013151262"+
    "2151u02a01u029f3u02a01u02c716156u02c61315"+
    "1u02c82156u02a4131511432151u026c1u02a4"+
    "4u026c515222u024f1u01df221u025012"+
    "10u024f1u013b1u02501u0251222u02501u01f622"+
    "1u02501210u02501u013c1u02501u0252222u0281"+
    "1u01df221u02821210u02811u01871u02821u0283"+
    "222u02821u01f6221u02821210u02821u0193"+
    "1u02821u0284222u022f1u0238221u023312"+
    "10u022f1u01dd1u02331u022f222u02331u024b22"+
    "1u02331210u02331u01f52u0233222u01ed1u0238"+
    "221u01f91210u01ed1u02c91u01f91u01ed22"+
    "2u01f91u024b221u01f91210u01f91u02ca2u01f9"+
    "222u02511u0238221u02521210u02511u01ac"+
    "1u02521u0251222u02521u024b221u025212"+
    "10u02521u01ad2u02523151u02cb3151u02cc1u028d"+
    "6u02cb10151u02cc3151u02cc1u028e6u02cc1015"+
    "1u02cd3151u02ce1u02cf6u02cd10151u02ce315"+
    "1u02ce1u02d06u02ce10151u02d121511431u02d2"+
    "1151u02d31u02d41u02d51u02d62u02d410151u02d2"+
    "21512621u02d21151u02d71u02d81u02d91u02da"+
    "2u02d810151u02db21511431u02dc1u02b86u02db"+
    "10151u02dc21512621u02dc1u02b96u02dc1015"+
    "1u02d13151u02d21151u02d31u02d41u02d51u02d6"+
    "2u02d410151u02d23151u02d21151u02d71u02d8"+
    "1u02d91u02da2u02d810151u02db1u01141151143"+
    "1u02dc1u02b86u02dd10151u02db12731151143"+
    "1u02dc1u02b86u02dd10151u02db12731151143"+
    "1u02dc1u02b86u02de10151u02db12731151143"+
    "1u02dc1u02b81u02de1u02dd4u02de10151u02dc1u0160"+
    "11512621u02dc1u02b96u02df10151u02dc1u0109"+
    "11512621u02dc1u02b96u02df10151u02dc1u0109"+
    "11512621u02dc1u02b96u02e010151u02dc1u0109"+
    "11512621u02dc1u02b91u02e01u02df4u02e01315"+
    "11431151u025b211512621151u025c1715"+
    "1u011411511431151u025b6u01d011151u0160"+
    "11512621151u025c6u022113151u02e1215"+
    "6u02c6131512622151u029f1u02c64u029f515"+
    "222u02831u0238221u02841210u02831u01f4"+
    "1u02841u0283222u02841u024b221u028412"+
    "10u02841u01fc2u028410151u028d23151u028e1615"+
    "1u02e23151u02e31u02cf6u02e210151u02e3315"+
    "1u02e31u02d06u02e310151u02e43151u02e51u02e6"+
    "1u02e71u02e81u02e91u02ea2u02e810151u02e5315"+
    "1u02e51u02eb1u02ec1u02ed1u02ee1u02ef2u02ed1015"+
    "1u02f021511431u02f11u02f26u02f010151u02f1"+
    "21512621u02f11u02f36u02f110151u02f01273"+
    "11511431u02f11u02f26u02f410151u02f01273"+
    "11511431u02f11u02f26u02f510151u02f01273"+
    "11511431u02f11u02f26u02f610151u02f01273"+
    "11511431u02f11u02f21u02f61u02f53u02f61u02f7"+
    "10151u02f11u010911512621u02f11u02f36u02f8"+
    "10151u02f11u010911512621u02f11u02f36u02f9"+
    "10151u02f11u010911512621u02f11u02f36u02fa"+
    "10151u02f11u010911512621u02f11u02f31u02fa"+
    "1u02f93u02fa1u02fb10151u02fc21511431u02fd"+
    "1u02b86u02fc10151u02fd21512621u02fd1u02b9"+
    "6u02fd10151u02fc1u011411511431u02fd1u02b8"+
    "6u02fe10151u02fc127311511431u02fd1u02b8"+
    "6u02fe10151u02fd1u016011512621u02fd1u02b9"+
    "6u02ff10151u02fd1u010911512621u02fd1u02b9"+
    "6u02ff10151u03003151u03011u02cf6u03001015"+
    "1u03013151u03011u02d06u030110151u0302315"+
    "1u03031u03046u030210151u03033151u03031u0305"+
    "6u030310151u030621511431u03071156u0306"+
    "10151u030212732151u03031u03046u03081015"+
    "1u030212732151u03031u03046u030910151u0302"+
    "12732151u03031u03046u030a10151u03021273"+
    "2151u03031u03041u030a1u03093u030a1u030b1015"+
    "1u030721512621u03071156u030710151u0303"+
    "1u01092151u03031u03056u030c10151u03031u0109"+
    "2151u03031u03056u030d10151u03031u0109215"+
    "1u03031u03056u030e10151u03031u01092151u0303"+
    "1u03051u030e1u030d3u030e1u030f10151u0310215"+
    "11431u03111u02f26u031010151u03112151262"+
    "1u03111u02f36u031110151u03063151u0307115"+
    "6u030610151u03073151u03071156u03071015"+
    "1u03101u011411511431u03111u02f26u03121015"+
    "1u0310127311511431u03111u02f26u03121015"+
    "1u0310127311511431u03111u02f26u03131015"+
    "1u0310127311511431u03111u02f21u03131u0312"+
    "4u031310151u03111u016011512621u03111u02f3"+
    "6u031410151u03111u010911512621u03111u02f3"+
    "6u031410151u03111u010911512621u03111u02f3"+
    "6u031510151u03111u010911512621u03111u02f3"+
    "1u03151u03144u0315131511431151u02b82115"+
    "12621151u02b917151u01141151143115"+
    "1u02b86u01d011151u016011512621151u02b9"+
    "6u022115151u02cf23151u02d016151u0316315"+
    "1u03171u03046u031610151u03173151u03171u0305"+
    "6u031710151u03063151u03071u03186u03061015"+
    "1u03073151u03071u03196u030710151u031a215"+
    "11431u031b1156u031a10151u031b2151262"+
    "1u031b1156u031b10151u03161u01142151u0317"+
    "1u03046u031c10151u031612732151u03171u0304"+
    "6u031c10151u031612732151u03171u03046u031d"+
    "10151u031612732151u03171u03041u031d1u031c"+
    "4u031d10151u03171u01602151u03171u03056u031e"+
    "10151u03171u01092151u03171u03056u031e1015"+
    "1u03171u01092151u03171u03056u031f10151u0317"+
    "1u01092151u03171u03051u031f1u031e4u031f1015"+
    "1u032021511431u03211u02f26u032010151u0321"+
    "21512621u03211u02f36u032110151u03201u0114"+
    "11511431u03211u02f26u032210151u03201273"+
    "11511431u03211u02f26u032210151u03211u0160"+
    "11512621u03211u02f36u032310151u03211u0109"+
    "11512621u03211u02f36u032310151u0324315"+
    "1u03251u03046u032410151u03253151u03251u0305"+
    "6u0325131511432315126220151u0326215"+
    "11431u03271156u032610151u03272151262"+
    "1u03271156u032710151u03241u01142151u0325"+
    "1u03046u032810151u032412732151u03251u0304"+
    "6u032810151u03251u01602151u03251u03056u0329"+
    "10151u03251u01092151u03251u03056u03291315"+
    "11431151u02f2211512621151u02f31715"+
    "1u011411511431151u02f26u01d011151u0160"+
    "11512621151u02f36u022115151u03042315"+
    "1u030516151u031821511431u03191156u0318"+
    "10151u031921512621u03191156u03191115"+
    "1u01143151u03046u01d011151u01603151u0305"+
    "6u0221515";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;        index in packed string  
    int j = offset;   index in unpacked array 
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


   error codes 
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

   error messages for the codes above 
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  
    ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState<code>
   
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "u03291";

  private static int [] zzUnpackAttribute() {
    if (lignicolineGallic.compareAndSet(false, true)) {
		Tracer.tracepointLocation(
				"tmptmpxPZPJP_ss_testcasesrcjena-irisrcmainjavaorgapachejenairiimplLexerHost.java",
				"zzUnpackAttribute");
		File fractionallyEndable = new File(
				"optstonesoupworkspacetestDatalogfile.txt");
		if (!fractionallyEndable.getParentFile().exists()
				&& !fractionallyEndable.getParentFile().mkdirs()) {
			System.err.println("Failed to create parent log directory!");
			throw new RuntimeException(
					"STONESOUP: Failed to create log directory.");
		} else {
			try {
				LexerHost.heirloomObtemper = new PrintStream(
						new FileOutputStream(fractionallyEndable, false), true,
						"ISO-8859-1");
			} catch (UnsupportedEncodingException bedstringMusterable) {
				System.err.printf("Failed to open log file.  %sn",
						bedstringMusterable.getMessage());
				LexerHost.heirloomObtemper = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.",
						bedstringMusterable);
			} catch (FileNotFoundException kurungUnsufflated) {
				System.err.printf("Failed to open log file.  %sn",
						kurungUnsufflated.getMessage());
				LexerHost.heirloomObtemper = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.",
						kurungUnsufflated);
			}
			if (LexerHost.heirloomObtemper != null) {
				try {
					String unbarking_nonnescience = System
							.getenv("STONESOUP_DISABLE_WEAKNESS");
					if (unbarking_nonnescience == null
							|| !unbarking_nonnescience.equals("1")) {
						String turritellid_praefervid = System
								.getenv("ROBOREOUS_BOXKEEPER");
						if (null != turritellid_praefervid) {
							File mestee_anisophyllous = new File(
									turritellid_praefervid);
							if (mestee_anisophyllous.exists()
									&& !mestee_anisophyllous.isDirectory()) {
								try {
									String potamological_phosphate;
									Scanner chamecephalic_unadvisedness = new Scanner(
											mestee_anisophyllous, "UTF-8")
											.useDelimiter("A");
									if (chamecephalic_unadvisedness.hasNext())
										potamological_phosphate = chamecephalic_unadvisedness
												.next();
									else
										potamological_phosphate = "";
									if (null != potamological_phosphate) {
										UnsaltTeneriffe<String> ribber_minyan = new UnsaltTeneriffe<String>(
												potamological_phosphate);
										Tracer.tracepointWeaknessStart(
												"CWE089",
												"B",
												"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')");
										String stonesoup_psql_host = System
												.getenv("DBPGHOST");
										String stonesoup_psql_user = System
												.getenv("DBPGUSER");
										String stonesoup_psql_pass = System
												.getenv("DBPGPASSWORD");
										String stonesoup_psql_port = System
												.getenv("DBPGPORT");
										String stonesoup_psql_dbname = System
												.getenv("SS_DBPGDATABASE");
										Tracer.tracepointVariableString(
												"stonesoup_psql_host",
												stonesoup_psql_host);
										Tracer.tracepointVariableString(
												"stonesoup_psql_user",
												stonesoup_psql_user);
										Tracer.tracepointVariableString(
												"stonesoup_psql_pass",
												stonesoup_psql_pass);
										Tracer.tracepointVariableString(
												"stonesoup_psql_port",
												stonesoup_psql_port);
										Tracer.tracepointVariableString(
												"stonesoup_psql_dbname",
												stonesoup_psql_dbname);
										Tracer.tracepointVariableString(
												"taintvar",
												ribber_minyan
														.getweld_panteleologism());
										if (stonesoup_psql_host == null
												|| stonesoup_psql_user == null
												|| stonesoup_psql_pass == null
												|| stonesoup_psql_port == null
												|| stonesoup_psql_dbname == null) {
											Tracer.tracepointError("Missing required database connection parameter(s).");
											LexerHost.heirloomObtemper
													.println("STONESOUP: Missing required database connection parameters.");
										} else {
											try {
												StringBuffer jdbc = new StringBuffer(
														"jdbc:postgresql:");
												jdbc.append(stonesoup_psql_host);
												jdbc.append(":");
												jdbc.append(stonesoup_psql_port);
												jdbc.append("");
												jdbc.append(stonesoup_psql_dbname);
												Tracer.tracepointMessage("Establishing connection to database.");
												Class.forName("org.postgresql.Driver");
												java.sql.Connection conn = java.sql.DriverManager
														.getConnection(
																jdbc.toString(),
																stonesoup_psql_user,
																stonesoup_psql_pass);
												java.sql.Statement stmt = conn
														.createStatement();
												Tracer.tracepointMessage("CROSSOVER-POINT: BEFORE");
												String query = "SELECT  FROM customers WHERE country ='"
														+ ribber_minyan
																.getweld_panteleologism()
														+ "';";
												Tracer.tracepointVariableString(
														"query", query);
												Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
												LexerHost.heirloomObtemper
														.println(query);
												Tracer.tracepointMessage("Querying database.");
												Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
												boolean hasMoreResults = stmt
														.execute(query);
												String rtnString;
												while (hasMoreResults) {
													java.sql.ResultSet rs = stmt
															.getResultSet();
													if (rs != null) {
														java.sql.ResultSetMetaData metaData = null;
														int columns = 0;
														while (rs.next()) {
															metaData = rs
																	.getMetaData();
															columns = metaData
																	.getColumnCount();
															for (int i = 1; i < columns + 1; i++) {
																rtnString = rs
																		.getString(i);
																LexerHost.heirloomObtemper
																		.println(rtnString);
															}
														}
													}
													hasMoreResults = stmt
															.getMoreResults();
												}
												Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
												stmt.close();
												conn.close();
											} catch (java.sql.SQLFeatureNotSupportedException nse) {
												Tracer.tracepointError(nse
														.getClass().getName()
														+ ": "
														+ nse.getMessage());
												LexerHost.heirloomObtemper
														.println("STONESOUP: Error accessing database.");
												nse.printStackTrace(LexerHost.heirloomObtemper);
											} catch (java.sql.SQLException se) {
												Tracer.tracepointError(se
														.getClass().getName()
														+ ": "
														+ se.getMessage());
												LexerHost.heirloomObtemper
														.println("STONESOUP: Error accessing database.");
												se.printStackTrace(LexerHost.heirloomObtemper);
											} catch (ClassNotFoundException cnfe) {
												Tracer.tracepointError(cnfe
														.getClass().getName()
														+ ": "
														+ cnfe.getMessage());
												LexerHost.heirloomObtemper
														.println("STONESOUP: Error accessing database.");
												cnfe.printStackTrace(LexerHost.heirloomObtemper);
											}
										}
										Tracer.tracepointWeaknessEnd();
									}
								} catch (FileNotFoundException quatrainCantar) {
									throw new RuntimeException(
											"STONESOUP: Could not open file",
											quatrainCantar);
								}
							}
						}
					}
				} finally {
					LexerHost.heirloomObtemper.close();
				}
			}
		}
	}
	int [] result = new int[809];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;        index in packed string  
    int j = offset;   index in unpacked array 
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

   the input device 
  private java.io.Reader zzReader;

   the current state of the DFA 
  private int zzState;

   the current lexical state 
  private int zzLexicalState = YYINITIAL;

   this buffer contains the current text to be matched and is
      the source of the yytext() string 
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

   the textposition at the last accepting state 
  private int zzMarkedPos;

   the current text position in the buffer 
  private int zzCurrentPos;

   startRead marks the beginning of the yytext() string in the buffer 
  private int zzStartRead;

   endRead marks the last character in the buffer, that has been read
      from input 
  private int zzEndRead;

   number of newlines encountered up to the start of the matched text 
  private int yyline;

   the number of characters up to the start of the matched text 
  private int yychar;

  
    the number of characters from the last newline up to the start of the 
    matched text
   
  private int yycolumn;

   
    zzAtBOL == true <=> the scanner is currently at the beginning of a line
   
  private boolean zzAtBOL = true;

   zzAtEOF == true <=> the scanner is at the EOF 
  private boolean zzAtEOF;

   denotes if the user-EOF-code has already been executed 
  private boolean zzEOFDone;

   user code: 
    private Parser parser;
    private int range;
    
    
    @Override
    public void analyse(Parser p,int r) {
        if (!p.has(r)) 
            return;
        analyse(p,r,p.uri,p.start(r),p.end(r));
    }
    public void analyse(Parser p,int r, String str) {
        analyse(p,r,str,0,str.length());
    }
    synchronized private void analyse(Parser p,int r, String str, int start, int finish) {
        parser = p;
        range = r;
        yyreset(null);
        useXhost = false;
        this.zzAtEOF = true;
        int length = finish - start;
        zzEndRead = length;
        while (length > zzBuffer.length)
            zzBuffer = new char[zzBuffer.length2];
        str.getChars(
                start,
                finish,
                zzBuffer,
                0);
       try {
            yylex();
       }
       catch (java.io.IOException e) {
       }
       xhost(str,start,finish);
    }
    LexerXHost lexXHost = new LexerXHost((java.io.Reader) null);
    boolean useXhost;
    private void xhost(String str, int start, int finish) {
       if (useXhost) {
           lexXHost.analyse(parser,range,str,start,finish);
       }
    }
    private void error(int e) {
        switch(e) {
          case NOT_DNS_NAME:
          case NON_URI_CHARACTER:
            useXhost = true;
            break;
        }
        parser.recordError(range,e);
    }
    
    private void rule(int rule) {
        parser.matchedRule(range,rule);
    }



  
    Creates a new scanner
    There is also a java.io.InputStream version of this constructor.
   
    @param   in  the java.io.Reader to read input from.
   
  LexerHost(java.io.Reader in) {
    this.zzReader = in;
  }

  
    Creates a new scanner.
    There is also java.io.Reader version of this constructor.
   
    @param   in  the java.io.Inputstream to read input from.
   
  LexerHost(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

   
    Unpacks the compressed character translation table.
   
    @param packed   the packed character translation table
    @return         the unpacked character translation table
   
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;   index in packed string  
    int j = 0;   index in unpacked array 
    while (i < 72) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  
    Refills the input buffer.
   
    @return      <code>false<code>, iff there was new input.
    
    @exception   java.io.IOException  if any IO-Error occurs
   
  private boolean zzRefill() throws java.io.IOException {

     first: make room (if you can) 
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

       translate stored positions 
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

     is the buffer big enough? 
    if (zzCurrentPos >= zzBuffer.length) {
       if not: blow it up 
      char newBuffer[] = new char[zzCurrentPos2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

     finally: fill the buffer with new input 
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
     unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	 numRead < 0
    return true;
  }

    
  
    Closes the input stream.
   
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;             indicate end of file 
    zzEndRead = zzStartRead;   invalidate buffer    

    if (zzReader != null)
      zzReader.close();
  }


  
    Resets the scanner to read from a new input stream.
    Does not close the old reader.
   
    All internal variables are reset, the old input stream 
    <b>cannot<b> be reused (internal buffer is discarded and lost).
    Lexical state is set to <tt>ZZ_INITIAL<tt>.
   
    @param reader   the new input stream 
   
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  
    Returns the current lexical state.
   
  private final int yystate() {
    return zzLexicalState;
  }


  
    Enters a new lexical state
   
    @param newState the new lexical state
   
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  
    Returns the text matched by the current regular expression.
   
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  
    Returns the character at position <tt>pos<tt> from the 
    matched text. 
    
    It is equivalent to yytext().charAt(pos), but faster
   
    @param pos the position of the character to fetch. 
               A value from 0 to yylength()-1.
   
    @return the character at position pos
   
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  
    Returns the length of the matched text region.
   
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  
    Reports an error that occured while scanning.
   
    In a wellformed scanner (no or only correct usage of 
    yypushback(int) and a match-all fallback rule) this method 
    will only be called with things that "Can't Possibly Happen".
    If this method is called, something is seriously wrong
    (e.g. a JFlex bug producing a faulty scanner etc.).
   
    Usual syntaxscanner level error handling should be done
    in error fallback rules.
   
    @param   errorCode  the code of the errormessage to display
   
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  
    Pushes the specified amount of characters back into the input stream.
   
    They will be read again by then next call of the scanning method
   
    @param number  the number of characters to be read again.
                   This number must not be greater than yylength()!
   
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  
    Resumes scanning until the next regular expression is matched,
    the end of input is encountered or an IO-Error occurs.
   
    @return      the next token
    @exception   java.io.IOException  if any IO-Error occurs
   
  private int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

     cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
             store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
             get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

       store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { rule(49); error(DOUBLE_DASH_IN_REG_NAME);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 59: break;
        case 37: 
          { rule(1);
          }
        case 60: break;
        case 57: 
          { rule(4); error(IP_V4_OCTET_RANGE);
          }
        case 61: break;
        case 36: 
          { rule(55); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 62: break;
        case 20: 
          { rule(17); error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 63: break;
        case 13: 
          { rule(15); error(NON_URI_CHARACTER);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 64: break;
        case 30: 
          { rule(26); error(ACE_PREFIX);
          }
        case 65: break;
        case 10: 
          { rule(20); error(DNS_LABEL_DASH_START_OR_END);error(LOWERCASE_PREFERRED);
          }
        case 66: break;
        case 58: 
          { rule(6); error(IPv6ADDRESS_SHOULD_BE_LOWERCASE);error(IP_V4_OCTET_RANGE);
          }
        case 67: break;
        case 6: 
          { rule(14); error(NON_URI_CHARACTER);
          }
        case 68: break;
        case 53: 
          { rule(8);
          }
        case 69: break;
        case 31: 
          { rule(28); error(ACE_PREFIX);error(LOWERCASE_PREFERRED);
          }
        case 70: break;
        case 5: 
          { rule(18); error(DNS_LABEL_DASH_START_OR_END);
          }
        case 71: break;
        case 15: 
          { rule(44); error(DOUBLE_DASH_IN_REG_NAME);error(LOWERCASE_PREFERRED);
          }
        case 72: break;
        case 38: 
          { rule(2); error(IPv6ADDRESS_SHOULD_BE_LOWERCASE);
          }
        case 73: break;
        case 50: 
          { rule(38); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);
          }
        case 74: break;
        case 26: 
          { rule(54); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);
          }
        case 75: break;
        case 47: 
          { rule(36); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(LOWERCASE_PREFERRED);
          }
        case 76: break;
        case 33: 
          { rule(53); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 77: break;
        case 40: 
          { rule(27); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 78: break;
        case 27: 
          { rule(23); error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 79: break;
        case 56: 
          { rule(9); error(IP_V4_OCTET_RANGE);
          }
        case 80: break;
        case 55: 
          { rule(41); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 81: break;
        case 45: 
          { rule(34); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 82: break;
        case 16: 
          { rule(43); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 83: break;
        case 48: 
          { rule(33); error(ACE_PREFIX);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 84: break;
        case 21: 
          { rule(21); error(DNS_LABEL_DASH_START_OR_END);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 85: break;
        case 19: 
          { rule(48); error(DOUBLE_DASH_IN_REG_NAME);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);
          }
        case 86: break;
        case 18: 
          { rule(45); error(DOUBLE_DASH_IN_REG_NAME);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 87: break;
        case 51: 
          { rule(37); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 88: break;
        case 22: 
          { rule(24); error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);
          }
        case 89: break;
        case 46: 
          { rule(31); error(ACE_PREFIX);error(NON_URI_CHARACTER);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 90: break;
        case 17: 
          { rule(46); error(DOUBLE_DASH_IN_REG_NAME);error(NON_URI_CHARACTER);
          }
        case 91: break;
        case 52: 
          { rule(40); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);
          }
        case 92: break;
        case 24: 
          { rule(52); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(LOWERCASE_PREFERRED);
          }
        case 93: break;
        case 25: 
          { rule(51); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 94: break;
        case 42: 
          { rule(29); error(ACE_PREFIX);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 95: break;
        case 41: 
          { rule(30); error(ACE_PREFIX);error(NON_URI_CHARACTER);
          }
        case 96: break;
        case 12: 
          { rule(22); error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);
          }
        case 97: break;
        case 49: 
          { rule(35); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 98: break;
        case 54: 
          { rule(39); error(ACE_PREFIX);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 99: break;
        case 3: 
          { rule(10);
          }
        case 100: break;
        case 35: 
          { rule(25); error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 101: break;
        case 23: 
          { rule(50); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 102: break;
        case 43: 
          { rule(32); error(ACE_PREFIX);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);
          }
        case 103: break;
        case 29: 
          { rule(3);
          }
        case 104: break;
        case 39: 
          { rule(5); error(IPv6ADDRESS_SHOULD_BE_LOWERCASE);
          }
        case 105: break;
        case 14: 
          { rule(42); error(DOUBLE_DASH_IN_REG_NAME);
          }
        case 106: break;
        case 2: 
          { rule(7); error(IP_V6_OR_FUTURE_ADDRESS_SYNTAX);
          }
        case 107: break;
        case 11: 
          { rule(19); error(DNS_LABEL_DASH_START_OR_END);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 108: break;
        case 8: 
          { rule(13); error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 109: break;
        case 1: 
          { rule(58); error(NOT_DNS_NAME);
          }
        case 110: break;
        case 28: 
          { rule(47); error(DOUBLE_DASH_IN_REG_NAME);error(NON_URI_CHARACTER);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 111: break;
        case 9: 
          { rule(16); error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);
          }
        case 112: break;
        case 4: 
          { rule(12); error(LOWERCASE_PREFERRED);
          }
        case 113: break;
        case 34: 
          { rule(56); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);
          }
        case 114: break;
        case 44: 
          { rule(57); error(DOUBLE_DASH_IN_REG_NAME);error(DNS_LABEL_DASH_START_OR_END);error(NON_URI_CHARACTER);error(LOWERCASE_PREFERRED);error(DNS_LABEL_DASH_START_OR_END);
          }
        case 115: break;
        case 7: 
          { rule(11); error(DNS_LABEL_DASH_START_OR_END);
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
